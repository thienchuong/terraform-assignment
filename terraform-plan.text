Run terraform init
/home/runner/work/_temp/2ff4db4b-0380-45b4-86ce-140b6ee6447a/terraform-bin init
Initializing HCP Terraform...
Initializing modules...
- skeleton in ../../skeleton/main
- skeleton.bastion in ../../modules/ec2
- skeleton.lambda in ../../modules/lambda
- skeleton.vpc in ../../modules/vpc
- skeleton.webapp in ../../modules/ec2
Initializing provider plugins...
- Finding latest version of hashicorp/tls...
- Finding latest version of hashicorp/archive...
- Finding hashicorp/aws versions matching "~> 5.0"...
- Installing hashicorp/tls v4.0.6...
- Installed hashicorp/tls v4.0.6 (signed by HashiCorp)
- Installing hashicorp/archive v2.7.0...
- Installed hashicorp/archive v2.7.0 (signed by HashiCorp)
- Installing hashicorp/aws v5.84.0...
- Installed hashicorp/aws v5.84.0 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

HCP Terraform has been successfully initialized!

You may now begin working with HCP Terraform. Try running "terraform plan" to
see any changes that are required for your infrastructure.

If you ever set or change modules or Terraform Settings, run "terraform init"
again to reinitialize your working directory.

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
/home/runner/work/_temp/2ff4db4b-0380-45b4-86ce-140b6ee6447a/terraform-bin plan -no-color
module.skeleton.data.archive_file.lambda_verify_alb: Reading...
module.skeleton.data.archive_file.lambda_verify_alb: Read complete after 0s [id=049767d03496a8d3ad6d62b6611b8d489696c9dd]
module.skeleton.module.lambda.data.aws_iam_policy_document.assume_role[0]: Reading...
module.skeleton.data.aws_ami.latest_ubuntu: Reading...
module.skeleton.data.aws_iam_policy_document.lambda_sns: Reading...
module.skeleton.data.aws_availability_zones.available: Reading...
module.skeleton.data.aws_iam_policy_document.limited_s3_access: Reading...
module.skeleton.module.lambda.data.aws_partition.current: Reading...
module.skeleton.data.aws_iam_policy_document.ec2_assume_role: Reading...
module.skeleton.data.aws_iam_policy_document.ec2_assume_role: Read complete after 0s [id=2851119427]
module.skeleton.module.lambda.data.aws_partition.current: Read complete after 0s [id=aws]
module.skeleton.data.aws_iam_policy_document.limited_s3_access: Read complete after 0s [id=1298087105]
module.skeleton.data.aws_iam_policy_document.lambda_sns: Read complete after 0s [id=511272893]
module.skeleton.module.lambda.data.aws_iam_policy_document.assume_role[0]: Read complete after 0s [id=2690255455]
module.skeleton.data.aws_availability_zones.available: Read complete after 1s [id=ap-southeast-1]
module.skeleton.data.aws_ami.latest_ubuntu: Read complete after 1s [id=ami-0370e4c760424b34d]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.skeleton.aws_autoscaling_attachment.this will be created
  + resource "aws_autoscaling_attachment" "this" {
      + autoscaling_group_name = (known after apply)
      + id                     = (known after apply)
      + lb_target_group_arn    = (known after apply)
    }

  # module.skeleton.aws_cloudwatch_event_rule.alb_healthcheck will be created
  + resource "aws_cloudwatch_event_rule" "alb_healthcheck" {
      + arn                 = (known after apply)
      + description         = "Application Loadbalancer Healthcheck"
      + event_bus_name      = "default"
      + force_destroy       = true
      + id                  = (known after apply)
      + name                = "ALBHealthcheck"
      + name_prefix         = (known after apply)
      + schedule_expression = "rate(5 minutes)"
      + tags_all            = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_cloudwatch_event_target.alb_healthcheck will be created
  + resource "aws_cloudwatch_event_target" "alb_healthcheck" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + force_destroy  = false
      + id             = (known after apply)
      + rule           = "ALBHealthcheck"
      + target_id      = (known after apply)
    }

  # module.skeleton.aws_iam_instance_profile.common will be created
  + resource "aws_iam_instance_profile" "common" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "assignment-dev-common-instance-profile"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "assignment-dev-common-instance-role"
      + tags_all    = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id   = (known after apply)
    }

  # module.skeleton.aws_iam_policy.limited_s3_access will be created
  + resource "aws_iam_policy" "limited_s3_access" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy granting limited access to some S3 buckets"
      + id               = (known after apply)
      + name             = "assignment-dev-iam-policy-limited-s3"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                          + "s3:GetBucketLocation",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::tet-archive"
                      + Sid      = "AllowListBucketContents"
                    },
                  + {
                      + Action   = [
                          + "s3:PutObjectAcl",
                          + "s3:PutObject",
                          + "s3:GetObjectAcl",
                          + "s3:GetObject",
                          + "s3:DeleteObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::tet-archive/*"
                      + Sid      = "AllowSpecificObjectActions"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_iam_role.instance_profile will be created
  + resource "aws_iam_role" "instance_profile" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "assignment-dev-common-instance-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.skeleton.aws_iam_role_policy_attachment.limited_s3_access will be created
  + resource "aws_iam_role_policy_attachment" "limited_s3_access" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "assignment-dev-common-instance-role"
    }

  # module.skeleton.aws_iam_role_policy_attachment.ssm_managed_instance_core will be created
  + resource "aws_iam_role_policy_attachment" "ssm_managed_instance_core" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + role       = "assignment-dev-common-instance-role"
    }

  # module.skeleton.aws_key_pair.ssh_key will be created
  + resource "aws_key_pair" "ssh_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "assignment-dev-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_lb.this will be created
  + resource "aws_lb" "this" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "assignment-dev-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Name" = "assignment-dev-alb"
        }
      + tags_all                                                     = {
          + "Name"      = "assignment-dev-alb"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.skeleton.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.skeleton.aws_lb_target_group.this will be created
  + resource "aws_lb_target_group" "this" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "assignment-dev-alb-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "assignment-dev-tg"
        }
      + tags_all                           = {
          + "Name"      = "assignment-dev-tg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.skeleton.aws_secretsmanager_secret.ssh_private_key will be created
  + resource "aws_secretsmanager_secret" "ssh_private_key" {
      + arn                            = (known after apply)
      + description                    = "Common SSH private key."
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = (known after apply)
      + name_prefix                    = "assignment-dev-ssh-private-key"
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + tags_all                       = {
          + "env"       = "dev"
          + "terraform" = "true"
        }

      + replica (known after apply)
    }

  # module.skeleton.aws_secretsmanager_secret_version.ssh_private_key will be created
  + resource "aws_secretsmanager_secret_version" "ssh_private_key" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

  # module.skeleton.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Security group for the ALB"
      + egress                 = [
          + {
              + cidr_blocks      = []
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-alb-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-alb-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.aws_security_group.app will be created
  + resource "aws_security_group" "app" {
      + arn                    = (known after apply)
      + description            = "Security group for the application instances"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-app-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-app-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.aws_security_group.bastion will be created
  + resource "aws_security_group" "bastion" {
      + arn                    = (known after apply)
      + description            = "Security group for the bastion host"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "14.186.116.64/32",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-bastion-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-bastion-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-bastion-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.tls_private_key.ssh_key will be created
  + resource "tls_private_key" "ssh_key" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 2048
    }

  # module.skeleton.module.bastion.aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0370e4c760424b34d"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = false
      + disable_api_termination              = false
      + ebs_optimized                        = false
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + hibernation                          = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = "stop"
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = []
      + key_name                             = "assignment-dev-key"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = false
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "assignment-dev-bastion"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev-bastion"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + tenancy                              = "default"
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags_all              = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.skeleton.module.lambda.data.aws_iam_policy_document.logs[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "logs" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "logs:CreateLogGroup",
              + "logs:CreateLogStream",
              + "logs:PutLogEvents",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
        }
    }

  # module.skeleton.module.lambda.aws_cloudwatch_log_group.lambda will be created
  + resource "aws_cloudwatch_log_group" "lambda" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/assignment-dev-lambda-verify-alb"
      + name_prefix       = (known after apply)
      + retention_in_days = 0
      + skip_destroy      = false
      + tags_all          = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.lambda.aws_iam_role.lambda[0] will be created
  + resource "aws_iam_role" "lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "assignment-dev-lambda-verify-alb-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.skeleton.module.lambda.aws_iam_role_policy.additional_json[0] will be created
  + resource "aws_iam_role_policy" "additional_json" {
      + id          = (known after apply)
      + name        = "assignment-dev-lambda-verify-alb-role-cloudwatch-event"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "sns:Publish"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowPublishSNS"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = "assignment-dev-lambda-verify-alb-role"
    }

  # module.skeleton.module.lambda.aws_iam_role_policy.logs[0] will be created
  + resource "aws_iam_role_policy" "logs" {
      + id          = (known after apply)
      + name        = "assignment-dev-lambda-verify-alb-role-logs"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = "assignment-dev-lambda-verify-alb-role"
    }

  # module.skeleton.module.lambda.aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + description                    = "Lambda function to implement healthcheck of Load Balancer"
      + filename                       = "../../skeleton/main/templates/lambda/lambda_function.zip"
      + function_name                  = "assignment-dev-lambda-verify-alb"
      + handler                        = "main.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.12"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "zK1vWnRkH7EeGmpHguATbPCieioOolqbEn4ANg/0/dU="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name" = "assignment-dev-lambda-verify-alb"
        }
      + tags_all                       = {
          + "Name"      = "assignment-dev-lambda-verify-alb"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + timeout                        = 10
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + ephemeral_storage {
          + size = 512
        }

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.skeleton.module.lambda.aws_lambda_permission.this["ALBHealthcheck"] will be created
  + resource "aws_lambda_permission" "this" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "assignment-dev-lambda-verify-alb"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = (known after apply)
      + statement_id_prefix = "ALBHealthcheck"
    }

  # module.skeleton.module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "assignment-dev-vpc-ap-southeast-1a"
        }
      + tags_all             = {
          + "Name"      = "assignment-dev-vpc-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc                  = (known after apply)
    }

  # module.skeleton.module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "assignment-dev-vpc"
        }
      + tags_all = {
          + "Name"      = "assignment-dev-vpc"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id   = (known after apply)
    }

  # module.skeleton.module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "assignment-dev-vpc-ap-southeast-1a"
        }
      + tags_all                           = {
          + "Name"      = "assignment-dev-vpc-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.skeleton.module.vpc.aws_route.public_internet_gateway will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.skeleton.module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "assignment-dev-vpc-private-subnet"
        }
      + tags_all         = {
          + "Name"      = "assignment-dev-vpc-private-subnet"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "assignment-dev-vpc-public-subnet"
        }
      + tags_all         = {
          + "Name"      = "assignment-dev-vpc-public-subnet"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-private-subnet-ap-southeast-1a"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-private-subnet-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-private-subnet-ap-southeast-1b"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-private-subnet-ap-southeast-1b"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-public-subnet-ap-southeast-1a"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-public-subnet-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-public-subnet-ap-southeast-1b"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-public-subnet-ap-southeast-1b"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_vpc.this will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + assign_generated_ipv6_cidr_block     = false
      + cidr_block                           = "192.168.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = false
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "assignment-dev-vpc"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev-vpc"
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.webapp.aws_autoscaling_group.this[0] will be created
  + resource "aws_autoscaling_group" "this" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 1
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = (known after apply)
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 1
      + metrics_granularity              = "1Minute"
      + min_size                         = 1
      + name                             = (known after apply)
      + name_prefix                      = "assignment-dev-"
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + termination_policies             = []
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + availability_zone_distribution (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + mixed_instances_policy (known after apply)

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "assignment-dev-webapp"
        }

      + traffic_source (known after apply)
    }

  # module.skeleton.module.webapp.aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                                  = (known after apply)
      + default_version                      = (known after apply)
      + description                          = "Description of the launch template"
      + disable_api_stop                     = false
      + disable_api_termination              = false
      + ebs_optimized                        = "false"
      + id                                   = (known after apply)
      + image_id                             = "ami-0370e4c760424b34d"
      + instance_initiated_shutdown_behavior = "stop"
      + instance_type                        = "t3.micro"
      + key_name                             = "assignment-dev-key"
      + latest_version                       = (known after apply)
      + name                                 = (known after apply)
      + name_prefix                          = "assignment-dev-"
      + tags                                 = {
          + "Name" = "assignment-dev"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + user_data                            = "IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIC15IG5naW54CmVjaG8gIkhlbGxvLCBXb3JsZCEiID4gL3Zhci93d3cvaHRtbC9pbmRleC5odG1sCnN5c3RlbWN0bCBzdGFydCBuZ2lueApzeXN0ZW1jdGwgZW5hYmxlIG5naW54Cg=="
      + vpc_security_group_ids               = (known after apply)

      + block_device_mappings {
          + device_name = "/dev/xvda"
          + no_device   = "0"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = (known after apply)
              + throughput            = (known after apply)
              + volume_size           = 8
              + volume_type           = "gp2"
            }
        }
      + block_device_mappings {
          + device_name = "/dev/sda1"
          + no_device   = "1"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = (known after apply)
              + throughput            = (known after apply)
              + volume_size           = 8
              + volume_type           = "gp2"
            }
        }

      + iam_instance_profile (known after apply)

      + metadata_options (known after apply)

      + monitoring {
          + enabled = true
        }
    }

Plan: 43 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + bastion_info                = {
      + autoscaling_group_id   = []
      + autoscaling_group_name = []
      + instance_id            = [
          + (known after apply),
        ]
      + instance_private_ip    = [
          + (known after apply),
        ]
      + instance_public_ip     = [
          + (known after apply),
        ]
      + launch_template_id     = []
    }
  + lambda_info                 = {
      + lambda_arn     = (known after apply)
      + lambda_name    = "assignment-dev-lambda-verify-alb"
      + lambda_version = (known after apply)
    }
  + secret_manager_arn_ssh_key  = (known after apply)
  + secret_manager_name_ssh_key = "assignment-dev-ssh-private-key"
  + vpc_info                    = {
      + azs                           = [
          + "ap-southeast-1a",
          + "ap-southeast-1b",
          + "ap-southeast-1c",
        ]
      + dhcp_options_id               = null
      + internet_gateway_arn          = (known after apply)
      + internet_gateway_id           = (known after apply)
      + nat_gateway_ids               = [
          + (known after apply),
        ]
      + nat_gateway_ips               = [
          + (known after apply),
        ]
      + private_route_table_ids       = [
          + (known after apply),
        ]
      + private_subnet_ids            = [
          + (known after apply),
          + (known after apply),
        ]
      + public_route_table_ids        = [
          + (known after apply),
        ]
      + public_subnet_ids             = [
          + (known after apply),
          + (known after apply),
        ]
      + secondary_cidr_blocks         = []
      + vpc_arn                       = (known after apply)
      + vpc_cidr_block                = "192.168.0.0/16"
      + vpc_default_network_acl_id    = (known after apply)
      + vpc_default_security_group_id = (known after apply)
      + vpc_id                        = (known after apply)
      + vpc_ipv6_cidr_block           = (known after apply)
      + vpc_main_route_table_id       = (known after apply)
    }
  + webapp_info                 = {
      + autoscaling_group_id   = [
          + (known after apply),
        ]
      + autoscaling_group_name = [
          + (known after apply),
        ]
      + instance_id            = []
      + instance_private_ip    = []
      + instance_public_ip     = []
      + launch_template_id     = [
          + (known after apply),
        ]
    }

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
/home/runner/work/_temp/2ff4db4b-0380-45b4-86ce-140b6ee6447a/terraform-bin apply -auto-approve
module.skeleton.data.archive_file.lambda_verify_alb: Reading...
module.skeleton.data.archive_file.lambda_verify_alb: Read complete after 0s [id=049767d03496a8d3ad6d62b6611b8d489696c9dd]
module.skeleton.module.lambda.data.aws_partition.current: Reading...
module.skeleton.data.aws_availability_zones.available: Reading...
module.skeleton.data.aws_iam_policy_document.limited_s3_access: Reading...
module.skeleton.data.aws_iam_policy_document.ec2_assume_role: Reading...
module.skeleton.data.aws_iam_policy_document.lambda_sns: Reading...
module.skeleton.data.aws_ami.latest_ubuntu: Reading...
module.skeleton.module.lambda.data.aws_partition.current: Read complete after 0s [id=aws]
module.skeleton.data.aws_iam_policy_document.limited_s3_access: Read complete after 0s [id=1298087105]
module.skeleton.data.aws_iam_policy_document.ec2_assume_role: Read complete after 0s [id=2851119427]
module.skeleton.data.aws_iam_policy_document.lambda_sns: Read complete after 0s [id=511272893]
module.skeleton.module.lambda.data.aws_iam_policy_document.assume_role[0]: Reading...
module.skeleton.module.lambda.data.aws_iam_policy_document.assume_role[0]: Read complete after 0s [id=2690255455]
module.skeleton.data.aws_availability_zones.available: Read complete after 1s [id=ap-southeast-1]
module.skeleton.data.aws_ami.latest_ubuntu: Read complete after 1s [id=ami-0370e4c760424b34d]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # module.skeleton.aws_autoscaling_attachment.this will be created
  + resource "aws_autoscaling_attachment" "this" {
      + autoscaling_group_name = (known after apply)
      + id                     = (known after apply)
      + lb_target_group_arn    = (known after apply)
    }

  # module.skeleton.aws_cloudwatch_event_rule.alb_healthcheck will be created
  + resource "aws_cloudwatch_event_rule" "alb_healthcheck" {
      + arn                 = (known after apply)
      + description         = "Application Loadbalancer Healthcheck"
      + event_bus_name      = "default"
      + force_destroy       = true
      + id                  = (known after apply)
      + name                = "ALBHealthcheck"
      + name_prefix         = (known after apply)
      + schedule_expression = "rate(5 minutes)"
      + tags_all            = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_cloudwatch_event_target.alb_healthcheck will be created
  + resource "aws_cloudwatch_event_target" "alb_healthcheck" {
      + arn            = (known after apply)
      + event_bus_name = "default"
      + force_destroy  = false
      + id             = (known after apply)
      + rule           = "ALBHealthcheck"
      + target_id      = (known after apply)
    }

  # module.skeleton.aws_iam_instance_profile.common will be created
  + resource "aws_iam_instance_profile" "common" {
      + arn         = (known after apply)
      + create_date = (known after apply)
      + id          = (known after apply)
      + name        = "assignment-dev-common-instance-profile"
      + name_prefix = (known after apply)
      + path        = "/"
      + role        = "assignment-dev-common-instance-role"
      + tags_all    = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id   = (known after apply)
    }

  # module.skeleton.aws_iam_policy.limited_s3_access will be created
  + resource "aws_iam_policy" "limited_s3_access" {
      + arn              = (known after apply)
      + attachment_count = (known after apply)
      + description      = "Policy granting limited access to some S3 buckets"
      + id               = (known after apply)
      + name             = "assignment-dev-iam-policy-limited-s3"
      + name_prefix      = (known after apply)
      + path             = "/"
      + policy           = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = [
                          + "s3:ListBucket",
                          + "s3:GetBucketLocation",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::tet-archive"
                      + Sid      = "AllowListBucketContents"
                    },
                  + {
                      + Action   = [
                          + "s3:PutObjectAcl",
                          + "s3:PutObject",
                          + "s3:GetObjectAcl",
                          + "s3:GetObject",
                          + "s3:DeleteObject",
                        ]
                      + Effect   = "Allow"
                      + Resource = "arn:aws:s3:::tet-archive/*"
                      + Sid      = "AllowSpecificObjectActions"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + policy_id        = (known after apply)
      + tags_all         = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_iam_role.instance_profile will be created
  + resource "aws_iam_role" "instance_profile" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "assignment-dev-common-instance-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.skeleton.aws_iam_role_policy_attachment.limited_s3_access will be created
  + resource "aws_iam_role_policy_attachment" "limited_s3_access" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "assignment-dev-common-instance-role"
    }

  # module.skeleton.aws_iam_role_policy_attachment.ssm_managed_instance_core will be created
  + resource "aws_iam_role_policy_attachment" "ssm_managed_instance_core" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      + role       = "assignment-dev-common-instance-role"
    }

  # module.skeleton.aws_key_pair.ssh_key will be created
  + resource "aws_key_pair" "ssh_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "assignment-dev-key"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.aws_lb.this will be created
  + resource "aws_lb" "this" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "assignment-dev-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = (known after apply)
      + subnets                                                      = (known after apply)
      + tags                                                         = {
          + "Name" = "assignment-dev-alb"
        }
      + tags_all                                                     = {
          + "Name"      = "assignment-dev-alb"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # module.skeleton.aws_lb_listener.http will be created
  + resource "aws_lb_listener" "http" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # module.skeleton.aws_lb_target_group.this will be created
  + resource "aws_lb_target_group" "this" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "assignment-dev-alb-tg"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags                               = {
          + "Name" = "assignment-dev-tg"
        }
      + tags_all                           = {
          + "Name"      = "assignment-dev-tg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + target_type                        = "instance"
      + vpc_id                             = (known after apply)

      + health_check {
          + enabled             = true
          + healthy_threshold   = 2
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 2
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # module.skeleton.aws_secretsmanager_secret.ssh_private_key will be created
  + resource "aws_secretsmanager_secret" "ssh_private_key" {
      + arn                            = (known after apply)
      + description                    = "Common SSH private key."
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = (known after apply)
      + name_prefix                    = "assignment-dev-ssh-private-key"
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + tags_all                       = {
          + "env"       = "dev"
          + "terraform" = "true"
        }

      + replica (known after apply)
    }

  # module.skeleton.aws_secretsmanager_secret_version.ssh_private_key will be created
  + resource "aws_secretsmanager_secret_version" "ssh_private_key" {
      + arn            = (known after apply)
      + id             = (known after apply)
      + secret_id      = (known after apply)
      + secret_string  = (sensitive value)
      + version_id     = (known after apply)
      + version_stages = (known after apply)
    }

  # module.skeleton.aws_security_group.alb will be created
  + resource "aws_security_group" "alb" {
      + arn                    = (known after apply)
      + description            = "Security group for the ALB"
      + egress                 = [
          + {
              + cidr_blocks      = []
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = (known after apply)
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-alb-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-alb-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-alb-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.aws_security_group.app will be created
  + resource "aws_security_group" "app" {
      + arn                    = (known after apply)
      + description            = "Security group for the application instances"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
                # (1 unchanged attribute hidden)
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-app-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-app-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-app-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.aws_security_group.bastion will be created
  + resource "aws_security_group" "bastion" {
      + arn                    = (known after apply)
      + description            = "Security group for the bastion host"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "14.186.116.64/32",
                ]
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
                # (1 unchanged attribute hidden)
            },
        ]
      + name                   = "assignment-dev-bastion-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "assignment-dev-bastion-sg"
        }
      + tags_all               = {
          + "Name"      = "assignment-dev-bastion-sg"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                 = (known after apply)
    }

  # module.skeleton.tls_private_key.ssh_key will be created
  + resource "tls_private_key" "ssh_key" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 2048
    }

  # module.skeleton.module.bastion.aws_instance.this[0] will be created
  + resource "aws_instance" "this" {
      + ami                                  = "ami-0370e4c760424b34d"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = true
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = false
      + disable_api_termination              = false
      + ebs_optimized                        = false
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + hibernation                          = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = "stop"
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t3.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = []
      + key_name                             = "assignment-dev-key"
      + monitoring                           = false
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = false
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "assignment-dev-bastion"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev-bastion"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + tenancy                              = "default"
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + credit_specification {
          + cpu_credits = "standard"
        }

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device {
          + delete_on_termination = true
          + device_name           = (known after apply)
          + encrypted             = true
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags_all              = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = 8
          + volume_type           = "gp2"
        }
    }

  # module.skeleton.module.lambda.data.aws_iam_policy_document.logs[0] will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "logs" {
      + id            = (known after apply)
      + json          = (known after apply)
      + minified_json = (known after apply)

      + statement {
          + actions   = [
              + "logs:CreateLogGroup",
              + "logs:CreateLogStream",
              + "logs:PutLogEvents",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
              + (known after apply),
            ]
        }
    }

  # module.skeleton.module.lambda.aws_cloudwatch_log_group.lambda will be created
  + resource "aws_cloudwatch_log_group" "lambda" {
      + arn               = (known after apply)
      + id                = (known after apply)
      + log_group_class   = (known after apply)
      + name              = "/aws/lambda/assignment-dev-lambda-verify-alb"
      + name_prefix       = (known after apply)
      + retention_in_days = 0
      + skip_destroy      = false
      + tags_all          = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.lambda.aws_iam_role.lambda[0] will be created
  + resource "aws_iam_role" "lambda" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = true
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "assignment-dev-lambda-verify-alb-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = {
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.skeleton.module.lambda.aws_iam_role_policy.additional_json[0] will be created
  + resource "aws_iam_role_policy" "additional_json" {
      + id          = (known after apply)
      + name        = "assignment-dev-lambda-verify-alb-role-cloudwatch-event"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "sns:Publish"
                      + Effect   = "Allow"
                      + Resource = "*"
                      + Sid      = "AllowPublishSNS"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = "assignment-dev-lambda-verify-alb-role"
    }

  # module.skeleton.module.lambda.aws_iam_role_policy.logs[0] will be created
  + resource "aws_iam_role_policy" "logs" {
      + id          = (known after apply)
      + name        = "assignment-dev-lambda-verify-alb-role-logs"
      + name_prefix = (known after apply)
      + policy      = (known after apply)
      + role        = "assignment-dev-lambda-verify-alb-role"
    }

  # module.skeleton.module.lambda.aws_lambda_function.this will be created
  + resource "aws_lambda_function" "this" {
      + architectures                  = (known after apply)
      + arn                            = (known after apply)
      + code_sha256                    = (known after apply)
      + description                    = "Lambda function to implement healthcheck of Load Balancer"
      + filename                       = "../../skeleton/main/templates/lambda/lambda_function.zip"
      + function_name                  = "assignment-dev-lambda-verify-alb"
      + handler                        = "main.lambda_handler"
      + id                             = (known after apply)
      + invoke_arn                     = (known after apply)
      + last_modified                  = (known after apply)
      + memory_size                    = 128
      + package_type                   = "Zip"
      + publish                        = true
      + qualified_arn                  = (known after apply)
      + qualified_invoke_arn           = (known after apply)
      + reserved_concurrent_executions = -1
      + role                           = (known after apply)
      + runtime                        = "python3.12"
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      + skip_destroy                   = false
      + source_code_hash               = "zK1vWnRkH7EeGmpHguATbPCieioOolqbEn4ANg/0/dU="
      + source_code_size               = (known after apply)
      + tags                           = {
          + "Name" = "assignment-dev-lambda-verify-alb"
        }
      + tags_all                       = {
          + "Name"      = "assignment-dev-lambda-verify-alb"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + timeout                        = 10
      + version                        = (known after apply)

      + environment {
          + variables = (known after apply)
        }

      + ephemeral_storage {
          + size = 512
        }

      + logging_config (known after apply)

      + tracing_config (known after apply)
    }

  # module.skeleton.module.lambda.aws_lambda_permission.this["ALBHealthcheck"] will be created
  + resource "aws_lambda_permission" "this" {
      + action              = "lambda:InvokeFunction"
      + function_name       = "assignment-dev-lambda-verify-alb"
      + id                  = (known after apply)
      + principal           = "events.amazonaws.com"
      + source_arn          = (known after apply)
      + statement_id        = (known after apply)
      + statement_id_prefix = "ALBHealthcheck"
    }

  # module.skeleton.module.vpc.aws_eip.nat[0] will be created
  + resource "aws_eip" "nat" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "assignment-dev-vpc-ap-southeast-1a"
        }
      + tags_all             = {
          + "Name"      = "assignment-dev-vpc-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc                  = (known after apply)
    }

  # module.skeleton.module.vpc.aws_internet_gateway.this[0] will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "assignment-dev-vpc"
        }
      + tags_all = {
          + "Name"      = "assignment-dev-vpc"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id   = (known after apply)
    }

  # module.skeleton.module.vpc.aws_nat_gateway.this[0] will be created
  + resource "aws_nat_gateway" "this" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "assignment-dev-vpc-ap-southeast-1a"
        }
      + tags_all                           = {
          + "Name"      = "assignment-dev-vpc-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.vpc.aws_route.private_nat_gateway[0] will be created
  + resource "aws_route" "private_nat_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.skeleton.module.vpc.aws_route.public_internet_gateway will be created
  + resource "aws_route" "public_internet_gateway" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)

      + timeouts {
          + create = "5m"
        }
    }

  # module.skeleton.module.vpc.aws_route_table.private[0] will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "assignment-dev-vpc-private-subnet"
        }
      + tags_all         = {
          + "Name"      = "assignment-dev-vpc-private-subnet"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table.public[0] will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "assignment-dev-vpc-public-subnet"
        }
      + tags_all         = {
          + "Name"      = "assignment-dev-vpc-public-subnet"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id           = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.private[0] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.private[1] will be created
  + resource "aws_route_table_association" "private" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.private[0] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.3.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-private-subnet-ap-southeast-1a"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-private-subnet-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.private[1] will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.4.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-private-subnet-ap-southeast-1b"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-private-subnet-ap-southeast-1b"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.0.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-public-subnet-ap-southeast-1a"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-public-subnet-ap-southeast-1a"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-southeast-1b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "192.168.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "assignment-dev-vpc-public-subnet-ap-southeast-1b"
        }
      + tags_all                                       = {
          + "Name"      = "assignment-dev-vpc-public-subnet-ap-southeast-1b"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.skeleton.module.vpc.aws_vpc.this will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + assign_generated_ipv6_cidr_block     = false
      + cidr_block                           = "192.168.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = false
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "assignment-dev-vpc"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev-vpc"
          + "env"       = "dev"
          + "terraform" = "true"
        }
    }

  # module.skeleton.module.webapp.aws_autoscaling_group.this[0] will be created
  + resource "aws_autoscaling_group" "this" {
      + arn                              = (known after apply)
      + availability_zones               = (known after apply)
      + default_cooldown                 = (known after apply)
      + desired_capacity                 = 1
      + force_delete                     = false
      + force_delete_warm_pool           = false
      + health_check_grace_period        = 300
      + health_check_type                = (known after apply)
      + id                               = (known after apply)
      + ignore_failed_scaling_activities = false
      + load_balancers                   = (known after apply)
      + max_size                         = 1
      + metrics_granularity              = "1Minute"
      + min_size                         = 1
      + name                             = (known after apply)
      + name_prefix                      = "assignment-dev-"
      + predicted_capacity               = (known after apply)
      + protect_from_scale_in            = false
      + service_linked_role_arn          = (known after apply)
      + target_group_arns                = (known after apply)
      + termination_policies             = []
      + vpc_zone_identifier              = (known after apply)
      + wait_for_capacity_timeout        = "10m"
      + warm_pool_size                   = (known after apply)

      + availability_zone_distribution (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = (known after apply)
        }

      + mixed_instances_policy (known after apply)

      + tag {
          + key                 = "Name"
          + propagate_at_launch = true
          + value               = "assignment-dev-webapp"
        }

      + traffic_source (known after apply)
    }

  # module.skeleton.module.webapp.aws_launch_template.this[0] will be created
  + resource "aws_launch_template" "this" {
      + arn                                  = (known after apply)
      + default_version                      = (known after apply)
      + description                          = "Description of the launch template"
      + disable_api_stop                     = false
      + disable_api_termination              = false
      + ebs_optimized                        = "false"
      + id                                   = (known after apply)
      + image_id                             = "ami-0370e4c760424b34d"
      + instance_initiated_shutdown_behavior = "stop"
      + instance_type                        = "t3.micro"
      + key_name                             = "assignment-dev-key"
      + latest_version                       = (known after apply)
      + name                                 = (known after apply)
      + name_prefix                          = "assignment-dev-"
      + tags                                 = {
          + "Name" = "assignment-dev"
        }
      + tags_all                             = {
          + "Name"      = "assignment-dev"
          + "env"       = "dev"
          + "terraform" = "true"
        }
      + user_data                            = "IyEvYmluL2Jhc2gKYXB0LWdldCB1cGRhdGUgLXkKYXB0LWdldCBpbnN0YWxsIC15IG5naW54CmVjaG8gIkhlbGxvLCBXb3JsZCEiID4gL3Zhci93d3cvaHRtbC9pbmRleC5odG1sCnN5c3RlbWN0bCBzdGFydCBuZ2lueApzeXN0ZW1jdGwgZW5hYmxlIG5naW54Cg=="
      + vpc_security_group_ids               = (known after apply)

      + block_device_mappings {
          + device_name = "/dev/xvda"
          + no_device   = "0"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = (known after apply)
              + throughput            = (known after apply)
              + volume_size           = 8
              + volume_type           = "gp2"
            }
        }
      + block_device_mappings {
          + device_name = "/dev/sda1"
          + no_device   = "1"

          + ebs {
              + delete_on_termination = "true"
              + encrypted             = "true"
              + iops                  = (known after apply)
              + throughput            = (known after apply)
              + volume_size           = 8
              + volume_type           = "gp2"
            }
        }

      + iam_instance_profile (known after apply)

      + metadata_options (known after apply)

      + monitoring {
          + enabled = true
        }
    }

Plan: 43 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + bastion_info                = {
      + autoscaling_group_id   = []
      + autoscaling_group_name = []
      + instance_id            = [
          + (known after apply),
        ]
      + instance_private_ip    = [
          + (known after apply),
        ]
      + instance_public_ip     = [
          + (known after apply),
        ]
      + launch_template_id     = []
    }
  + lambda_info                 = {
      + lambda_arn     = (known after apply)
      + lambda_name    = "assignment-dev-lambda-verify-alb"
      + lambda_version = (known after apply)
    }
  + secret_manager_arn_ssh_key  = (known after apply)
  + secret_manager_name_ssh_key = "assignment-dev-ssh-private-key"
  + vpc_info                    = {
      + azs                           = [
          + "ap-southeast-1a",
          + "ap-southeast-1b",
          + "ap-southeast-1c",
        ]
      + dhcp_options_id               = null
      + internet_gateway_arn          = (known after apply)
      + internet_gateway_id           = (known after apply)
      + nat_gateway_ids               = [
          + (known after apply),
        ]
      + nat_gateway_ips               = [
          + (known after apply),
        ]
      + private_route_table_ids       = [
          + (known after apply),
        ]
      + private_subnet_ids            = [
          + (known after apply),
          + (known after apply),
        ]
      + public_route_table_ids        = [
          + (known after apply),
        ]
      + public_subnet_ids             = [
          + (known after apply),
          + (known after apply),
        ]
      + secondary_cidr_blocks         = []
      + vpc_arn                       = (known after apply)
      + vpc_cidr_block                = "192.168.0.0/16"
      + vpc_default_network_acl_id    = (known after apply)
      + vpc_default_security_group_id = (known after apply)
      + vpc_id                        = (known after apply)
      + vpc_ipv6_cidr_block           = (known after apply)
      + vpc_main_route_table_id       = (known after apply)
    }
  + webapp_info                 = {
      + autoscaling_group_id   = [
          + (known after apply),
        ]
      + autoscaling_group_name = [
          + (known after apply),
        ]
      + instance_id            = []
      + instance_private_ip    = []
      + instance_public_ip     = []
      + launch_template_id     = [
          + (known after apply),
        ]
    }
module.skeleton.tls_private_key.ssh_key: Creating...
module.skeleton.tls_private_key.ssh_key: Creation complete after 1s [id=00be6dd74ea3423ac23f8511d9e4260583364d29]
module.skeleton.aws_iam_policy.limited_s3_access: Creating...
module.skeleton.module.lambda.aws_cloudwatch_log_group.lambda: Creating...
module.skeleton.aws_iam_role.instance_profile: Creating...
module.skeleton.module.vpc.aws_vpc.this: Creating...
module.skeleton.aws_key_pair.ssh_key: Creating...
module.skeleton.module.lambda.aws_iam_role.lambda[0]: Creating...
module.skeleton.aws_secretsmanager_secret.ssh_private_key: Creating...
module.skeleton.aws_cloudwatch_event_rule.alb_healthcheck: Creating...
module.skeleton.aws_iam_policy.limited_s3_access: Creation complete after 0s [id=arn:aws:iam::267583709295:policy/assignment-dev-iam-policy-limited-s3]
module.skeleton.module.lambda.aws_iam_role.lambda[0]: Creation complete after 0s [id=assignment-dev-lambda-verify-alb-role]
module.skeleton.aws_iam_role.instance_profile: Creation complete after 0s [id=assignment-dev-common-instance-role]
module.skeleton.aws_iam_role_policy_attachment.ssm_managed_instance_core: Creating...
module.skeleton.aws_iam_role_policy_attachment.limited_s3_access: Creating...
module.skeleton.module.lambda.aws_iam_role_policy.additional_json[0]: Creating...
module.skeleton.aws_iam_instance_profile.common: Creating...
module.skeleton.aws_iam_role_policy_attachment.limited_s3_access: Creation complete after 1s [id=assignment-dev-common-instance-role-20250119082259550700000003]
module.skeleton.aws_iam_role_policy_attachment.ssm_managed_instance_core: Creation complete after 1s [id=assignment-dev-common-instance-role-20250119082259591600000004]
module.skeleton.module.lambda.aws_iam_role_policy.additional_json[0]: Creation complete after 1s [id=assignment-dev-lambda-verify-alb-role:assignment-dev-lambda-verify-alb-role-cloudwatch-event]
module.skeleton.aws_key_pair.ssh_key: Creation complete after 2s [id=assignment-dev-key]
module.skeleton.module.lambda.aws_cloudwatch_log_group.lambda: Creation complete after 2s [id=/aws/lambda/assignment-dev-lambda-verify-alb]
module.skeleton.module.lambda.data.aws_iam_policy_document.logs[0]: Reading...
module.skeleton.module.lambda.data.aws_iam_policy_document.logs[0]: Read complete after 0s [id=160893491]
module.skeleton.module.lambda.aws_iam_role_policy.logs[0]: Creating...
module.skeleton.aws_secretsmanager_secret.ssh_private_key: Creation complete after 2s [id=arn:aws:secretsmanager:ap-southeast-1:267583709295:secret:assignment-dev-ssh-private-key20250119082259218700000001-g5s5a7]
module.skeleton.aws_secretsmanager_secret_version.ssh_private_key: Creating...
module.skeleton.module.lambda.aws_iam_role_policy.logs[0]: Creation complete after 0s [id=assignment-dev-lambda-verify-alb-role:assignment-dev-lambda-verify-alb-role-logs]
module.skeleton.aws_cloudwatch_event_rule.alb_healthcheck: Creation complete after 2s [id=ALBHealthcheck]
module.skeleton.aws_secretsmanager_secret_version.ssh_private_key: Creation complete after 1s [id=arn:aws:secretsmanager:ap-southeast-1:267583709295:secret:assignment-dev-ssh-private-key20250119082259218700000001-g5s5a7|terraform-20250119082300722100000005]
module.skeleton.aws_iam_instance_profile.common: Creation complete after 6s [id=assignment-dev-common-instance-profile]
module.skeleton.module.vpc.aws_vpc.this: Still creating... [10s elapsed]
module.skeleton.module.vpc.aws_vpc.this: Creation complete after 15s [id=vpc-0ed32a6b1a58f0e36]
module.skeleton.module.vpc.aws_subnet.public[0]: Creating...
module.skeleton.module.vpc.aws_internet_gateway.this[0]: Creating...
module.skeleton.module.vpc.aws_subnet.public[1]: Creating...
module.skeleton.module.vpc.aws_subnet.private[0]: Creating...
module.skeleton.module.vpc.aws_route_table.public[0]: Creating...
module.skeleton.aws_lb_target_group.this: Creating...
module.skeleton.module.vpc.aws_subnet.private[1]: Creating...
module.skeleton.aws_security_group.app: Creating...
module.skeleton.module.vpc.aws_route_table.private[0]: Creating...
module.skeleton.aws_security_group.bastion: Creating...
module.skeleton.module.vpc.aws_internet_gateway.this[0]: Creation complete after 1s [id=igw-0ab3c551f5e1da39d]
module.skeleton.module.vpc.aws_eip.nat[0]: Creating...
module.skeleton.module.vpc.aws_subnet.private[0]: Creation complete after 2s [id=subnet-0a39b90a5ae6ab079]
module.skeleton.module.vpc.aws_subnet.private[1]: Creation complete after 2s [id=subnet-072cde3d83e833500]
module.skeleton.module.vpc.aws_route_table.private[0]: Creation complete after 2s [id=rtb-05ccc24bad41e90fc]
module.skeleton.module.vpc.aws_route_table_association.private[0]: Creating...
module.skeleton.module.vpc.aws_route_table_association.private[1]: Creating...
module.skeleton.module.vpc.aws_route_table.public[0]: Creation complete after 2s [id=rtb-0e7ab763e09d161c7]
module.skeleton.module.vpc.aws_route.public_internet_gateway: Creating...
module.skeleton.module.vpc.aws_route_table_association.private[0]: Creation complete after 1s [id=rtbassoc-0221912f3c6c84424]
module.skeleton.module.vpc.aws_eip.nat[0]: Creation complete after 2s [id=eipalloc-0b603c5b5c17b2e09]
module.skeleton.module.vpc.aws_route_table_association.private[1]: Creation complete after 1s [id=rtbassoc-017e0f40c59d4ba05]
module.skeleton.module.vpc.aws_route.public_internet_gateway: Creation complete after 1s [id=r-rtb-0e7ab763e09d161c71080289494]
module.skeleton.aws_lb_target_group.this: Creation complete after 3s [id=arn:aws:elasticloadbalancing:ap-southeast-1:267583709295:targetgroup/assignment-dev-alb-tg/831ab28e4dee9e23]
module.skeleton.aws_security_group.app: Creation complete after 5s [id=sg-06ee3bf0e329ba7aa]
module.skeleton.aws_security_group.alb: Creating...
module.skeleton.module.webapp.aws_launch_template.this[0]: Creating...
module.skeleton.aws_security_group.bastion: Creation complete after 5s [id=sg-004ec36fc2ec6f084]
module.skeleton.aws_security_group.alb: Creation complete after 4s [id=sg-0beab9cb6b12f33da]
module.skeleton.module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed]
module.skeleton.module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed]
module.skeleton.module.webapp.aws_launch_template.this[0]: Creation complete after 7s [id=lt-07ca860a27852b242]
module.skeleton.module.webapp.aws_autoscaling_group.this[0]: Creating...
module.skeleton.module.vpc.aws_subnet.public[0]: Creation complete after 12s [id=subnet-0e13c7600e78b26a6]
module.skeleton.module.vpc.aws_subnet.public[1]: Creation complete after 12s [id=subnet-0bcc0aebda9806055]
module.skeleton.module.vpc.aws_route_table_association.public[1]: Creating...
module.skeleton.module.vpc.aws_route_table_association.public[0]: Creating...
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Creating...
module.skeleton.aws_lb.this: Creating...
module.skeleton.module.bastion.aws_instance.this[0]: Creating...
module.skeleton.module.vpc.aws_route_table_association.public[1]: Creation complete after 1s [id=rtbassoc-0a730cab4b67f98c6]
module.skeleton.module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-0f0132d9e3ee75892]
module.skeleton.module.webapp.aws_autoscaling_group.this[0]: Still creating... [10s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [10s elapsed]
module.skeleton.aws_lb.this: Still creating... [10s elapsed]
module.skeleton.module.bastion.aws_instance.this[0]: Still creating... [10s elapsed]
module.skeleton.module.webapp.aws_autoscaling_group.this[0]: Creation complete after 12s [id=assignment-dev-2025011908232560520000000a]
module.skeleton.aws_autoscaling_attachment.this: Creating...
module.skeleton.aws_autoscaling_attachment.this: Creation complete after 1s [id=assignment-dev-2025011908232560520000000a-2025011908233817050000000d]
module.skeleton.module.bastion.aws_instance.this[0]: Creation complete after 17s [id=i-0fff757b33ef0738b]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [20s elapsed]
module.skeleton.aws_lb.this: Still creating... [20s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [30s elapsed]
module.skeleton.aws_lb.this: Still creating... [30s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [40s elapsed]
module.skeleton.aws_lb.this: Still creating... [40s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [50s elapsed]
module.skeleton.aws_lb.this: Still creating... [50s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m0s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m0s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m10s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m10s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m20s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m20s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m30s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m30s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m40s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m40s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [1m50s elapsed]
module.skeleton.aws_lb.this: Still creating... [1m50s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Still creating... [2m0s elapsed]
module.skeleton.aws_lb.this: Still creating... [2m0s elapsed]
module.skeleton.module.vpc.aws_nat_gateway.this[0]: Creation complete after 2m8s [id=nat-0620f67049fca0d1d]
module.skeleton.module.vpc.aws_route.private_nat_gateway[0]: Creating...
module.skeleton.module.vpc.aws_route.private_nat_gateway[0]: Creation complete after 2s [id=r-rtb-05ccc24bad41e90fc1080289494]
module.skeleton.aws_lb.this: Still creating... [2m10s elapsed]
module.skeleton.aws_lb.this: Still creating... [2m20s elapsed]
module.skeleton.aws_lb.this: Still creating... [2m30s elapsed]
module.skeleton.aws_lb.this: Still creating... [2m40s elapsed]
module.skeleton.aws_lb.this: Still creating... [2m50s elapsed]
module.skeleton.aws_lb.this: Creation complete after 2m57s [id=arn:aws:elasticloadbalancing:ap-southeast-1:267583709295:loadbalancer/app/assignment-dev-alb/273016dd178c9845]
module.skeleton.aws_lb_listener.http: Creating...
module.skeleton.module.lambda.aws_lambda_function.this: Creating...
module.skeleton.aws_lb_listener.http: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-1:267583709295:listener/app/assignment-dev-alb/273016dd178c9845/2c2bd737c8237524]
module.skeleton.module.lambda.aws_lambda_function.this: Creation complete after 7s [id=assignment-dev-lambda-verify-alb]
module.skeleton.module.lambda.aws_lambda_permission.this["ALBHealthcheck"]: Creating...
module.skeleton.aws_cloudwatch_event_target.alb_healthcheck: Creating...
module.skeleton.module.lambda.aws_lambda_permission.this["ALBHealthcheck"]: Creation complete after 1s [id=ALBHealthcheck2025011908263028250000000e]
module.skeleton.aws_cloudwatch_event_target.alb_healthcheck: Creation complete after 1s [id=ALBHealthcheck-terraform-2025011908263028410000000f]
Releasing state lock. This may take a few moments...

Apply complete! Resources: 43 added, 0 changed, 0 destroyed.

Outputs:

bastion_info = {
  "autoscaling_group_id" = []
  "autoscaling_group_name" = []
  "instance_id" = [
    "i-0fff757b33ef0738b",
  ]
  "instance_private_ip" = [
    "192.168.0.224",
  ]
  "instance_public_ip" = [
    "47.129.167.39",
  ]
  "launch_template_id" = []
}
lambda_info = {
  "lambda_arn" = "arn:aws:lambda:ap-southeast-1:267583709295:function:assignment-dev-lambda-verify-alb"
  "lambda_name" = "assignment-dev-lambda-verify-alb"
  "lambda_version" = "4"
}
secret_manager_arn_ssh_key = "arn:aws:secretsmanager:ap-southeast-1:267583709295:secret:assignment-dev-ssh-private-key20250119082259218700000001-g5s5a7"
secret_manager_name_ssh_key = "assignment-dev-ssh-private-key"
vpc_info = {
  "azs" = tolist([
    "ap-southeast-1a",
    "ap-southeast-1b",
    "ap-southeast-1c",
  ])
  "dhcp_options_id" = null
  "internet_gateway_arn" = "arn:aws:ec2:ap-southeast-1:267583709295:internet-gateway/igw-0ab3c551f5e1da39d"
  "internet_gateway_id" = "igw-0ab3c551f5e1da39d"
  "nat_gateway_ids" = [
    "nat-0620f67049fca0d1d",
  ]
  "nat_gateway_ips" = [
    "18.143.212.217",
  ]
  "private_route_table_ids" = [
    "rtb-05ccc24bad41e90fc",
  ]
  "private_subnet_ids" = [
    "subnet-0a39b90a5ae6ab079",
    "subnet-072cde3d83e833500",
  ]
  "public_route_table_ids" = [
    "rtb-0e7ab763e09d161c7",
  ]
  "public_subnet_ids" = [
    "subnet-0e13c7600e78b26a6",
    "subnet-0bcc0aebda9806055",
  ]
  "secondary_cidr_blocks" = []
  "vpc_arn" = "arn:aws:ec2:ap-southeast-1:267583709295:vpc/vpc-0ed32a6b1a58f0e36"
  "vpc_cidr_block" = "192.168.0.0/16"
  "vpc_default_network_acl_id" = "acl-057c841a8f0ed9e9c"
  "vpc_default_security_group_id" = "sg-0fed1acb0f4a15488"
  "vpc_id" = "vpc-0ed32a6b1a58f0e36"
  "vpc_ipv6_cidr_block" = ""
  "vpc_main_route_table_id" = "rtb-0afa00f989ae3af19"
}
webapp_info = {
  "autoscaling_group_id" = [
    "assignment-dev-2025011908232560520000000a",
  ]
  "autoscaling_group_name" = [
    "assignment-dev-2025011908232560520000000a",
  ]
  "instance_id" = []
  "instance_private_ip" = []
  "instance_public_ip" = []
  "launch_template_id" = [
    "lt-07ca860a27852b242",
  ]
}

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/

Warning: The `set-output` command is deprecated and will be disabled soon. Please upgrade to using Environment Files. For more information see: https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
0s
0s
